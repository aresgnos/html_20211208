20211217

데이터 다 담기면 화면 만든다.
데이터 다 담기기 전에 화면 만들면 오류남.

<script>
    export default {
        // 생명주기(자동호출)
        created() {


        },

        // 상태변수
        data() {
            return{


            }

        },

        //메소드, 함수
        methods : {

            
        }
    }
</script>


, 와 ; 쓰임새 차이

console로 받은 데이터에서 target을 보라!!

번호가 필요할 땐 반복분에 idx를 추가
idx는 0번부터 시작

항상 console.log로 확인을 해봐라

괄호랑
제발 오타 좀!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

집에서 설치할 땐 webboard 아래에 나와있는 걸로

<td colspan="2"></td> => 셀합치기

return을 주면 상태변수를 따로 안주고
화면에 바로 출력할 수 있다.


table1
<template>
    <div>
        <h3>주문목록</h3>
        <hr />

        <table border="1">
        <thead>
            <tr>
                <th>체크</th>
                <th>아이디</th>
                <th>나이</th>
                <th>가격</th>
                <th>수량</th>
                <th>합계</th>
            </tr>
        </thead>


        <tbody>
            <tr v-for="(tmp, idx) in items" v-bind:key="tmp">
                <td><input type="checkbox" v-model="tmp.chk" 
                @change="handleCheck(idx)" /></td>
                <td>{{tmp.id}}</td>
                <td>{{tmp.age}}</td>
                <td>{{tmp.price}}</td>
                <td>
                    {{tmp.cnt1}}
                    <select v-model="tmp.cnt1" @change="handleCheck(idx)">
                        <option v-for="tmp1 in tmp.cnt" v-bind:key="tmp1">
                            {{tmp1}}
                        </option>
                    </select>
                </td>
                <td>{{tmp.sum}}</td>
            </tr>

            <tr>
                <td colsapn="2">합계</td>
                <td>{{ sumAge }}</td>
                <td>{{ sumPrice }}/td>
                <td></td>
                <td>{{ sumTotal }}/td>
            </tr>
        </tbody>
        </table>
    </div>
</template>

<script>
    export default {
        // 생명주기(자동호출)
        created() {
            this.handleData();

        },
        mounted() {

        },

        // 미리 계산 (생명주기 + 메소드)
        computed : {
            sumTotal(){
                let sum = 0;
                for(let tmp of this.items){
                    sum += tmp.sum;
                }
                return sum;
            },
            sumAge(){
                let sum = 0;
                for(let tmp of this.items){
                    sum += tmp.age;
                }
                console.log(sum);
                return sum;
            },
            sumPrice() {
                let sum = 0;
                for(let tmp of this.items){
                    sum += tmp.price;
                }
                return sum;
            },
        },

        // 상태변수
        data() {
            return{
                items : [],
            }
        },
    
        //메소드, 함수
        methods : {

            handleCheck(idx) {
                console.log('Table1.vue => handleCheck', idx);
                if(this.items[idx].chk === true){
                    this.items[idx].sum =
                        this.items[idx].price * this.items[idx].cnt1;
                }
                else {
                    this.items[idx].sum = 0;
                }
            },

            async handleData(){
                //백엔드로부터 데이터를 받았다고 가정
                this.items = [
                    { id:'a1', age:14, price:123, cnt:30 },
                    { id:'a2', age:24, price:453, cnt:42 },
                    { id:'a3', age:34, price:567, cnt:53 },
                    { id:'a4', age:54, price:345, cnt:6 },
                    { id:'a5', age:64, price:768, cnt:7 },
                ];
                // id, age, price, cnt = key
                
                //1. for 배열의 번호를 반복 0 1 2 3 4 
                for(let i=0; i<this.items.length; i++){
                    this.items[i]['chk'] = false;
                    this.items[i]['sum'] = 0; // 0 1 2 3 4 =>leghth가 5이기 때문
                    this.items[i]['cnt1'] = 1;
                }
            

                // //2. forEach 배열 내의 내용을 1개씩 복사
                // for(let tmp of this.items) {
                //     tmp['chk'] = false;
                // }
                //1.2 같음

                //백엔드에서 받은 값 출력 [{},{},{},{}]
                console.log(this.items);
            }
        }
    }

</script>

<style scoped>

</style>



[ {id: }, {id: }, {id: }, {id: } ]
for (let tmp of this.items){
tmp['필요한 키값'] = 20;
// 반복문 돌리기
배열에서 어느 것이 선택됐는지 알려면 idx를 넣어서 번호를 부여해준다.

items => [ {id: age:6 }, {id: age:34 }, {id: age:8 } ]
this items[1]['age'] = 34 

v-model은 입력하는 값을 데이터변수에 넣을 때,
button은 사람이 입력하는 값을 넣는게 아니기 때문에
v-model이 아닌 @click 같은 이벤트를 부여